/*
	Speaker Sound & Rotation NL2 Script
	
	An extension of the "EmergencySpeaker" script
	by Bestdani, from his "97 Degrees" park.
	
	Extension by David Wolfe
	06/10/2024
	MIT License
	
	Initializes the speaker's rotation to the angle specified by the user,
	and plays sounds depending if the coaster is E-Stopped or not.
*/

import com.nolimitscoaster.Script;
import com.nolimitscoaster.SceneObject;
import com.nolimitscoaster.SceneObjectElement;
import com.nolimitscoaster.Coaster;
import com.nolimitscoaster.Train;
import com.nolimitscoaster.StaticSound;
import com.nolimitscoaster.ResourcePath;
import com.nolimitscoaster.TrackTrigger;
import com.nolimitscoaster.TrackTriggerListener;
import nlvm.lang.Math;
import nlvm.lang.Double;

import util.SceneObjectTools;

public class RedsSpeaker extends Script implements TrackTriggerListener {
	private static final String SCRIPT_NAME = "RedsSpeaker";		// Script name for debugging
	private static final String SPEAKER_ELEMENT_NAME = "speaker";	// Name of the speaker element in the SCO/model
	private static final float SOUND_RANGE = 3.0f;					// Default range for sound
	private static final float SOUND_FALLOFF = 1.0f;				// Default falloff for sound
	private static final float SOUND_GAIN = 0.8f;					// Default gain for sound
	private static final float SOUND_PITCH = 1.0f;					// Default pitch for sound

	private Coaster coaster;
	private StaticSound soundNormal;
	private StaticSound soundEmergency;
	private StaticSound soundTrigger;

	public bool onInit() {
		SceneObject sco = SceneObjectTools.getSceneObjectForEntityId(
			sim,
			getParentEntityId(),
			SCRIPT_NAME
		);
		SceneObjectElement speaker = SceneObjectTools.getElementForName(sco, SPEAKER_ELEMENT_NAME, SCRIPT_NAME);
		coaster = sco.getCoasterParameter("coaster");
		
		// Set speaker rotation (if able)
		float radRotation = (sco.getDoubleParameter("angle") != null) ? (float)Math.toRadians(sco.getDoubleParameter("angle").doubleValue()) : 0;
		setSpeakerRotation(speaker, radRotation);
		
		// Setup loop sound
		soundNormal = getOptionalSoundFromScoParameter(sco, speaker, "audio_file");
		if (soundNormal != null){
			soundNormal.playLoop();
		}

		// Setup E-Stop sound
		soundEmergency = getOptionalSoundFromScoParameter(sco, speaker, "audio_file_emergency");
		if (soundEmergency != null && coaster == null){
			System.out.println(SCRIPT_NAME + ": E-Stop Audio will not play without a valid Coaster set.");
		}

		// Setup trigger sound
		soundTrigger = getOptionalSoundFromScoParameter(sco, speaker, "audio_file_trigger");
		TrackTrigger trigger = sco.getTrackTriggerParameter("trigger");
		if (soundTrigger != null){
			if (trigger != null){
				trigger.addTrackTriggerListener(this);
			}
			else{
				System.out.println(SCRIPT_NAME + ": Trigger Audio will not play without a valid Trigger set.");
			}
		}
		
		// Only return true and run onNextFrame() if one or more sounds are set
		return (soundNormal == null && soundEmergency == null && soundTrigger == null) ? false : true;
	}
	
	protected void setSpeakerRotation(SceneObjectElement element, float radRotation){ // Required by RedsSpeakerHoriz
		element.setRotation(radRotation, 0.f, 0.f);
	}

	private float getFloatParameterOrDefault(SceneObject sco, String parameterName, float defaultValue){
		Double parameter = sco.getDoubleParameter(parameterName);
		if (parameter != null){
			return parameter.floatValue();
		}
		else{
			return defaultValue;
		}
	}

	private StaticSound getOptionalSoundFromScoParameter(SceneObject sco, SceneObjectElement element, String paramName){
		ResourcePath resourcePath = sco.getResourcePathParameter(paramName);
		if (resourcePath == null){
			return null;
		}

		StaticSound sound = StaticSound.loadFromResource(resourcePath, StaticSound.FLAG_MIXDOWN_MONO);
		sound.setDistanceParameters(
			getFloatParameterOrDefault(sco, "range", SOUND_RANGE),
			getFloatParameterOrDefault(sco, "falloff", SOUND_FALLOFF)
		);
		sound.setGain(getFloatParameterOrDefault(sco, "gain", SOUND_GAIN));
		sound.setPitch(getFloatParameterOrDefault(sco, "pitch", SOUND_PITCH));
		sound.setPosition(element.getAbsoluteMatrix().getTrans());
		sound.setDopplerMode(false);
		sound.setEnvironmentMode(StaticSound.E_ENVMODE_LOCAL);
		return sound;
	}
	
	public void onTrainEntering(TrackTrigger trigger, Train train){
		soundTrigger.play();
	}
	
	public void onTrainLeaving(TrackTrigger trigger, Train train){
		// Do nothing! :D
	}

	public void onNextFrame(float tick){
		if (coaster != null && coaster.isEmergencyStop()){
			if (soundNormal != null){
				soundNormal.stop();
			}
			if (soundTrigger != null){
				soundTrigger.stop();
			}
			if (soundEmergency != null){
				soundEmergency.playLoop();
			}
		}
		else{
			if (soundEmergency != null){
				soundEmergency.stop();
			}
			if (soundNormal != null){
				soundNormal.playLoop();
			}
		}
	}
}